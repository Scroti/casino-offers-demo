name: Deploy to GCP Cloud Run

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy Backend'
        required: true
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy Frontend'
        required: true
        default: true
        type: boolean
      environment:
        description: 'Environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  BACKEND_SERVICE_NAME: casino-offers-backend
  FRONTEND_SERVICE_NAME: casino-offers-frontend

jobs:
  # Job 1: Deploy Backend
  deploy-backend:
    if: ${{ github.event.inputs.deploy_backend != 'false' }}
    runs-on: ubuntu-latest
    outputs:
      backend-url: ${{ steps.get-backend-url.outputs.url }}
      backend-success: ${{ steps.deploy-backend.outcome }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          export_default_credentials: true
      
      - name: Configure Docker for GCP
        run: |
          gcloud auth configure-docker
      
      - name: Build and Deploy Backend
        id: deploy-backend
        working-directory: ./server
        run: |
          echo "üöÄ Building and deploying backend..."
          
          # Build and deploy to Cloud Run
          gcloud run deploy ${{ env.BACKEND_SERVICE_NAME }} \
            --source . \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --allow-unauthenticated \
            --port 3000 \
            --memory 1Gi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --timeout 900 \
            --concurrency 100 \
            --set-env-vars="
              NODE_ENV=production,
              APP_PORT=3000,
              APP_ENVIRONMENT=production,
              APP_VERSIONING_DEFAULT_VERSION=v1,
              JWT_SECRET=${{ secrets.JWT_SECRET }},
              JWT_EXPIRES=${{ secrets.JWT_EXPIRES }},
              MONGO_DB_USER=${{ secrets.MONGO_DB_USER }},
              MONGO_DB_PASSWORD=${{ secrets.MONGO_DB_PASSWORD }},
              MONGO_DB_SERVER=${{ secrets.MONGO_DB_SERVER }},
              MONGO_DB_NAME=${{ secrets.MONGO_DB_NAME }},
              APP_NAME=Casino Offers API,
              APP_SWAGGER_TAG=casino-offers,
              APP_SWAGGER_VERSION=1.0.0,
              APP_SWAGGER_SERVER=https://${{ env.BACKEND_SERVICE_NAME }}-${{ env.GCP_PROJECT_ID }}.a.run.app
            " \
            --quiet
          
          echo "‚úÖ Backend deployment completed!"
      
      - name: Wait for Backend to be Ready
        run: |
          echo "‚è≥ Waiting for backend service to be ready..."
          sleep 30
          
          # Get the service URL
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE_NAME }} \
            --region ${{ env.GCP_REGION }} \
            --format 'value(status.url)')
          
          echo "Backend URL: $BACKEND_URL"
          
          # Wait for health check
          for i in {1..10}; do
            if curl -f "$BACKEND_URL/health" > /dev/null 2>&1; then
              echo "‚úÖ Backend is healthy!"
              break
            else
              echo "‚è≥ Backend not ready yet, waiting... (attempt $i/10)"
              sleep 10
            fi
          done
      
      - name: Get Backend URL
        id: get-backend-url
        run: |
          BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE_NAME }} \
            --region ${{ env.GCP_REGION }} \
            --format 'value(status.url)')
          echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "Backend URL: $BACKEND_URL"
      
      - name: Test Backend API
        run: |
          BACKEND_URL="${{ steps.get-backend-url.outputs.url }}"
          echo "üß™ Testing backend API..."
          
          # Test health endpoint
          curl -f "$BACKEND_URL/health" || exit 1
          
          # Test API endpoint
          curl -f "$BACKEND_URL/api/v1" || echo "‚ö†Ô∏è API endpoint not ready yet"
          
          echo "‚úÖ Backend API tests passed!"

  # Job 2: Deploy Frontend (depends on backend)
  deploy-frontend:
    if: ${{ github.event.inputs.deploy_frontend != 'false' }}
    needs: deploy-backend
    runs-on: ubuntu-latest
    outputs:
      frontend-url: ${{ steps.get-frontend-url.outputs.url }}
      frontend-success: ${{ steps.deploy-frontend.outcome }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          export_default_credentials: true
      
      - name: Configure Docker for GCP
        run: |
          gcloud auth configure-docker
      
      - name: Build and Deploy Frontend
        id: deploy-frontend
        run: |
          echo "üé® Building and deploying frontend..."
          
          # Set backend URL for frontend
          BACKEND_URL="${{ needs.deploy-backend.outputs.backend-url }}"
          echo "Using backend URL: $BACKEND_URL"
          
          # Build and deploy to Cloud Run
          gcloud run deploy ${{ env.FRONTEND_SERVICE_NAME }} \
            --source . \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --allow-unauthenticated \
            --port 3000 \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --timeout 900 \
            --concurrency 100 \
            --set-env-vars="
              NODE_ENV=production,
              NEXT_PUBLIC_API_URL=$BACKEND_URL/api/v1,
              NEXT_PUBLIC_APP_NAME=Casino Offers,
              NEXT_PUBLIC_APP_VERSION=1.0.0
            " \
            --quiet
          
          echo "‚úÖ Frontend deployment completed!"
      
      - name: Wait for Frontend to be Ready
        run: |
          echo "‚è≥ Waiting for frontend service to be ready..."
          sleep 30
          
          # Get the service URL
          FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE_NAME }} \
            --region ${{ env.GCP_REGION }} \
            --format 'value(status.url)')
          
          echo "Frontend URL: $FRONTEND_URL"
          
          # Wait for health check
          for i in {1..10}; do
            if curl -f "$FRONTEND_URL" > /dev/null 2>&1; then
              echo "‚úÖ Frontend is healthy!"
              break
            else
              echo "‚è≥ Frontend not ready yet, waiting... (attempt $i/10)"
              sleep 10
            fi
          done
      
      - name: Get Frontend URL
        id: get-frontend-url
        run: |
          FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE_NAME }} \
            --region ${{ env.GCP_REGION }} \
            --format 'value(status.url)')
          echo "url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "Frontend URL: $FRONTEND_URL"
      
      - name: Test Frontend
        run: |
          FRONTEND_URL="${{ steps.get-frontend-url.outputs.url }}"
          echo "üß™ Testing frontend..."
          
          # Test main page
          curl -f "$FRONTEND_URL" || exit 1
          
          echo "‚úÖ Frontend tests passed!"

  # Job 3: Final Summary and Notifications
  deployment-summary:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          export_default_credentials: true
      
      - name: Get Service URLs
        run: |
          echo "========================================="
          echo "üöÄ Deployment Summary"
          echo "========================================="
          
          # Get backend URL
          if [ "${{ needs.deploy-backend.outputs.backend-success }}" == "success" ]; then
            BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE_NAME }} \
              --region ${{ env.GCP_REGION }} \
              --format 'value(status.url)')
            echo "‚úÖ Backend URL: $BACKEND_URL"
          else
            echo "‚ùå Backend deployment failed"
          fi
          
          # Get frontend URL
          if [ "${{ needs.deploy-frontend.outputs.frontend-success }}" == "success" ]; then
            FRONTEND_URL=$(gcloud run services describe ${{ env.FRONTEND_SERVICE_NAME }} \
              --region ${{ env.GCP_REGION }} \
              --format 'value(status.url)')
            echo "‚úÖ Frontend URL: $FRONTEND_URL"
          else
            echo "‚ùå Frontend deployment failed"
          fi
          
          echo "========================================="
          echo "üìä Service Status:"
          echo "Backend: ${{ needs.deploy-backend.outputs.backend-success }}"
          echo "Frontend: ${{ needs.deploy-frontend.outputs.frontend-success }}"
          echo "========================================="
      
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy-backend.outputs.backend-success }}" == "success" ] && [ "${{ needs.deploy-frontend.outputs.frontend-success }}" == "success" ]; then
            echo "üéâ All services deployed successfully!"
            exit 0
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi
