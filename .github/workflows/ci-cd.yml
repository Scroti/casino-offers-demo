name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Lint and Test Backend
  backend-ci:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || contains(github.event.head_commit.message, '[backend]') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      
      - name: Install Backend Dependencies
        working-directory: ./server
        run: npm ci
      
      - name: Lint Backend
        working-directory: ./server
        run: npm run lint
      
      - name: Test Backend
        working-directory: ./server
        run: npm run test
      
      - name: Build Backend
        working-directory: ./server
        run: npm run build

  # Job 2: Lint and Test Frontend
  frontend-ci:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || contains(github.event.head_commit.message, '[frontend]') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Install Frontend Dependencies
        run: npm ci
      
      - name: Lint Frontend
        run: npm run lint
      
      - name: Build Frontend
        run: npm run build

  # Job 3: Deploy Backend (only on main branch)
  deploy-backend:
    needs: backend-ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true
      
      - name: Configure Docker for GCP
        run: |
          gcloud auth configure-docker
      
      - name: Build and Deploy Backend
        working-directory: ./server
        run: |
          echo "üöÄ Building and deploying backend..."
          
          gcloud run deploy casino-offers-backend \
            --source . \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --port 3000 \
            --memory 1Gi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --timeout 900 \
            --concurrency 100 \
            --set-env-vars="
              NODE_ENV=production,
              APP_PORT=3000,
              APP_ENVIRONMENT=production,
              APP_VERSIONING_DEFAULT_VERSION=v1,
              JWT_SECRET=${{ secrets.JWT_SECRET }},
              JWT_EXPIRES=${{ secrets.JWT_EXPIRES }},
              MONGO_DB_USER=${{ secrets.MONGO_DB_USER }},
              MONGO_DB_PASSWORD=${{ secrets.MONGO_DB_PASSWORD }},
              MONGO_DB_SERVER=${{ secrets.MONGO_DB_SERVER }},
              MONGO_DB_NAME=${{ secrets.MONGO_DB_NAME }},
              APP_NAME=Casino Offers API,
              APP_SWAGGER_TAG=casino-offers,
              APP_SWAGGER_VERSION=1.0.0,
              APP_SWAGGER_SERVER=https://casino-offers-backend-${{ secrets.GCP_PROJECT_ID }}.a.run.app
            " \
            --quiet
      
      - name: Wait for Backend
        run: |
          echo "‚è≥ Waiting for backend to be ready..."
          sleep 30
          
          BACKEND_URL=$(gcloud run services describe casino-offers-backend \
            --region us-central1 \
            --format 'value(status.url)')
          
          for i in {1..10}; do
            if curl -f "$BACKEND_URL/health" > /dev/null 2>&1; then
              echo "‚úÖ Backend is ready!"
              break
            else
              echo "‚è≥ Backend not ready yet... (attempt $i/10)"
              sleep 10
            fi
          done
      
      - name: Get Backend URL
        id: backend-url
        run: |
          BACKEND_URL=$(gcloud run services describe casino-offers-backend \
            --region us-central1 \
            --format 'value(status.url)')
          echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "Backend URL: $BACKEND_URL"

  # Job 4: Deploy Frontend (depends on backend)
  deploy-frontend:
    needs: [frontend-ci, deploy-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true
      
      - name: Configure Docker for GCP
        run: |
          gcloud auth configure-docker
      
      - name: Build and Deploy Frontend
        run: |
          echo "üé® Building and deploying frontend..."
          
          BACKEND_URL="${{ needs.deploy-backend.outputs.backend-url }}"
          echo "Using backend URL: $BACKEND_URL"
          
          gcloud run deploy casino-offers-frontend \
            --source . \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --port 3000 \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --timeout 900 \
            --concurrency 100 \
            --set-env-vars="
              NODE_ENV=production,
              NEXT_PUBLIC_API_URL=$BACKEND_URL/api/v1,
              NEXT_PUBLIC_APP_NAME=Casino Offers,
              NEXT_PUBLIC_APP_VERSION=1.0.0
            " \
            --quiet
      
      - name: Wait for Frontend
        run: |
          echo "‚è≥ Waiting for frontend to be ready..."
          sleep 30
          
          FRONTEND_URL=$(gcloud run services describe casino-offers-frontend \
            --region us-central1 \
            --format 'value(status.url)')
          
          for i in {1..10}; do
            if curl -f "$FRONTEND_URL" > /dev/null 2>&1; then
              echo "‚úÖ Frontend is ready!"
              break
            else
              echo "‚è≥ Frontend not ready yet... (attempt $i/10)"
              sleep 10
            fi
          done
      
      - name: Get Frontend URL
        id: frontend-url
        run: |
          FRONTEND_URL=$(gcloud run services describe casino-offers-frontend \
            --region us-central1 \
            --format 'value(status.url)')
          echo "url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "Frontend URL: $FRONTEND_URL"

  # Job 5: Final Summary
  deployment-summary:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true
      
      - name: Deployment Summary
        run: |
          echo "========================================="
          echo "üöÄ Deployment Summary"
          echo "========================================="
          
          if [ "${{ needs.deploy-backend.outcome }}" == "success" ]; then
            BACKEND_URL=$(gcloud run services describe casino-offers-backend \
              --region us-central1 \
              --format 'value(status.url)')
            echo "‚úÖ Backend URL: $BACKEND_URL"
          else
            echo "‚ùå Backend deployment failed"
          fi
          
          if [ "${{ needs.deploy-frontend.outcome }}" == "success" ]; then
            FRONTEND_URL=$(gcloud run services describe casino-offers-frontend \
              --region us-central1 \
              --format 'value(status.url)')
            echo "‚úÖ Frontend URL: $FRONTEND_URL"
          else
            echo "‚ùå Frontend deployment failed"
          fi
          
          echo "========================================="
